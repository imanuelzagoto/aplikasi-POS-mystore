Catatan pembuatan aplikasi POS myshop berbasis web dengan laravel 8


# install alat bantu implementasi proyek
1. install XAMPP
2. Install visual studio code
3. Install laravel

# Setup larval
1. Install composer
   "  https://getcomposer.org/ "
2. Install larval installer
   "composer global require laravel/installer"
3. Membuat proyek laravel baru
   "composer create-project laravel/laravel:^8.0 namafileproyek"
4. Masuk ke direcotry proyer laravel
   "cd proyeklaravel"
5. Download/install kebutuhan package laravel
   "composer install atau composer update"
6. Untuk menampilkan daftar proyek open source yang digunakan oleh proyek laravel
   "Composer fund"
7. Buka proyek larval di Visual Studio code
   "code ."
8. Untuk memastikan instálási laravel berjalan
   "Php artisan serve"
   "http://127.0.0.1:8000"
   Screen Shot 2023-09-23 at 21.46.44

# Integrasi laravel dengan adminLTE versi 2
- install adminLTE pada pada proyek lavável di directory public
  "git clone https://github.com/ColorlibHQ/AdminLTE.git"
- pada folder resources/views tambahkan folder layouts dan tambahkan file dengan Nama master.blade.php
- kemudian pastekan template index adminLTE ke salami file master.blade.php
- Lulu hapus script pada bawaan lavável di file welcome.blade.php, kemudian panggil master.blade.php
  "@extends('layouts.master')
- kemudian integrasikan asset template adminLTE yang ada pada public yang ada pada file master.blade.php
  "<link rel="stylesheet" href="{{ asset('helper-master/bower_components/bootstrap/dist/css/bootstrap.min.css') }}">"
- jalankan proyek di browser
- melakukan analisa pada tampilan web sesuai dengan kebutuhan proyek

# Customization menu-menu aplikasi sesuai kebutuhan
############## Menu Dashboard Admin ##############
- Dasbor (Dashboard)
- Data Pokok (Master)
	* Kategori (Category)
	* Produk (Product)
	* Anggota (Member)
	* Pemasok (Supplier)
- Transaksi (Transactions)
	* Pengeluaran (Expenses)
	* Daftar Pembelian (Purchase List)
	* Transaksi Pembelian (Purchase Transaction)
	* Daftar Penjualan (Sales List)
	* Transaksi Aktif (Active Transactions)
	* Transaksi Baru (New Transactions)
- Laporan (Reports)
	* Laporan Penjualan (Sales Reports)
	* Laporan Keuangan (Financial Reports)
	* Laporan Inventaris (Inventory Reports)
	* Laporan Aktivitas Pengguna (User Activity Reports)
- Pengaturan (Settings)
	* Pengguna (User)
	* Pengaturan (Setting)
	* Profil (Profile)

- pada file master.blade.php lakukan pembagian beberapa komponen dengan menambahkan file sidebar.blade.php dan header.blade.php kedalam folder resources/layouts
- pada section header dalam master.blade.php lakukan cut untuk dipindahkan kedalam file header.blade.php
- setelah section header dicut tambahkan @includeIf('layouts.header') untuk ngeload section yang telah dipindahkan ke file header.blade.php
- kemudian lakukan juga untuk section sidebar dalam master.blade.php untuk dipindahkan ke dalam file sidebar.blade.php dan tambahkan @includeIf('layouts.header') kedalam file master blade bagian section sidebar
- tambahkan file pada layouts dengan nama footer.blade.php dan paste section footer yang telah di cut didalam file master.blade.php
- kemudian lakukan customization menu-menu sidebar
- pada menu dashboard gunakan yang single menu
- setelah menu sudah custome kemudian lakukan pergantian icon2 pada keseluruhan menu sesuai dengan kebutuhan pada menu
- pada menu dashboard tambahkan grafik

# Membuat Migration
- buat nama database di phpmyadmin
- lalu jalankan php artisan migrate untuk membuat database
- jika ingin menghapus isi dari database tinggal jalankan perintah php artisan migrate:rollback
- kemudian pada folder databse laravel buka folder migration di file create_table_user.php tambahkan kolom baru dengan perintah php artisan make:migration add_new_column_to_users_table
- pada file add_new_column_to_users_table.php dibagian ini tambahkan table photo dan level
	public function up()
    	{
        	Schema::table('users', function (Blueprint $table) {
            	//
        	});
    	} 
	menjadi seperti ini :
	public function up()
    	{
        	Schema::table('users', function (Blueprint $table) {
            	$table->string('photo')->nullable();
            	$table->tinyInteger('level')->default(0);
        	});
    	}
- tetapi jika ingin mau rolleback tinggal tambahkan ini 
	public function down()
    		{
        		Schema::table('users', function (Blueprint $table) {
            			$table->dropColumn([
                		'photo',
                		'level'
            			]);
        		});
    		}
- selanjutnya buat table product dengan perintah php artisan make:migration create_category_table
	public function up()
    	{
        	Schema::create('category', function (Blueprint $table) {
            	$table->increments('id_category');
            	$table->string('name_category')->unique();
            	$table->timestamps();
        	});
    	}
- selanjutnya buat table product dengan perintah php artisan make:migration create_product_table
	public function up()
    {
        Schema::create('product', function (Blueprint $table) {
            $table->increments('id_product');
            $table->integer('id_category');
            $table->string('product_name')->unique();
            $table->string('brand')->nullable();
            $table->integer('purchase_price');
            $table->tinyInteger('discount')->default(0);
            $table->integer('price');
            $table->integer('stock');
            $table->timestamps();
        });
    }
- setelah tabel migration sudah dibuat jalankan perintah php artisan migrate

# membuat helper di laravel
- buat folder helpers ke dalam direcotry proyek app/Http/Helpers
- didalam folder Helpers buat file helpers.php
- file helper agar dapat dibaca diseluruh file php harus mendaftarkannya ke dalam file composer.json terletak pada json name autoload
	"autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        },
        "files": [
            "app/Http/Helpers/helpers.php"
        ]

    },
- untuk memastikan helpers ini berjalan lakukan pengujian dengan menjalankan perintah php artisan tinker
	php artisan tinker
	Psy Shell v0.11.21 (PHP 8.2.9 — cli) by Justin Hileman
	> 1000000
	= 1000000

	> number_format (100000)
	= "100,000"
- dan lakukan pengujian dengan membuat function di dalam file helpers.php
	function format_uang($angka)
	{
    		return number_format($angka, 0, ',', '.');
	}

- untuk jalankan testing helpers harus menjalankan composer dump-autoload terlebih dahulu dan kemudian jalankan kembali php artisan tinker
- kemudian jalankan format file helpersnya
	jika outputnya seperti ini :
	php artisan tinker
	Psy Shell v0.11.21 (PHP 8.2.9 — cli) by Justin Hileman
	> format_uang (1000000)
	= "1.000.000"
	maka format tersebut sudah replace

- setelah sudah selesai kemudian buatlah format angka terbilang pada file helpers
	format seperti ini :
	
	function terbilang($angka)
	{
    		$angka = abs($angka);
    		$baca  = array('', 'satu', 'dua', 'tiga', 'empat', 'lima', 'enam', 'tujuh', 'delapan', 'sembilan', 'sepuluh', 'sebelas');
    		$terbilang = '';

    		if ($angka < 12) { // 0 - 11
        	$terbilang = ' ' . $baca[$angka];
   		} elseif ($angka < 20) { // 12 - 19
        	$terbilang = terbilang($angka - 10) . ' belas';
    		} elseif ($angka < 100) { // 20 - 99
        	$terbilang = terbilang($angka / 10) . ' puluh' . terbilang($angka % 10);
    		} elseif ($angka < 200) { // 100 - 199
        	$terbilang = ' seratus' . terbilang($angka - 100);
    		} elseif ($angka < 1000) { // 200 - 999
        	$terbilang = terbilang($angka / 100) . ' ratus' . terbilang($angka % 100);
    		} elseif ($angka < 2000) { // 1.000 - 1.999
        	$terbilang = ' seribu' . terbilang($angka - 1000);
    		} elseif ($angka < 1000000) { // 2.000 - 999.999
        	$terbilang = terbilang($angka / 1000) . ' ribu' . terbilang($angka % 1000);
    		} elseif ($angka < 1000000000) { // 1000000 - 999.999.990
        	$terbilang = terbilang($angka / 1000000) . ' juta' . terbilang($angka % 1000000);
    		}

    		return $terbilang;
		}
- setelah sudah selesai lakukan untuk membaut format tanggal indonesia
	function tanggal_indonesia($tgl, $tampil_hari = true)
{
    $nama_hari  = array(
        'Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jum\'at', 'Sabtu'
    );
    $nama_bulan = array(
        1 =>
        'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
    );

    $tahun   = substr($tgl, 0, 4);
    $bulan   = $nama_bulan[(int) substr($tgl, 5, 2)];
    $tanggal = substr($tgl, 8, 2);
    $text    = '';

    if ($tampil_hari) {
        $urutan_hari = date('w', mktime(0, 0, 0, substr($tgl, 5, 2), $tanggal, $tahun));
        $hari        = $nama_hari[$urutan_hari];
        $text       .= "$hari, $tanggal $bulan $tahun";
    } else {
        $text       .= "$tanggal $bulan $tahun";
    }

    return $text;
}

# menghilangkan public URL
- pada folder public pindahkan file .htaccess ke direcotory proyek
- kemudian edit file .htaccess nya
- kemudian ubah format .htaccess dengan format ini 
	<IfModule mod_rewrite.c>
		<IfModule mod_negotiation.c>
			Options -MultiViews -Indexes
		</IfModule>

		RewriteEngine On

		# Redirect Trailing Slashes If Not A Folder...
		RewriteCond %{REQUEST_FILENAME} -d [OR]
		RewriteCond %{REQUEST_FILENAME} -f
		RewriteRule ^ ^$1 [N]

		RewriteCond %{REQUEST_URI} (\.\w+$) [NC]
		RewriteRule ^(.*)$ public/$1

		# Send Requests To Front Controller...
		RewriteCond %{REQUEST_FILENAME} !-d
		RewriteCond %{REQUEST_FILENAME} !-f
		RewriteRule ^ server.php [L]
	</IfModule>

# membuat halaman login
- melakukan proses autentikasi dan otorisasi
- sebelum masuk proses autentikasi dan otorisasi terlebih dahulu kita menginstal package yang dibutuhkan
- kemudian terlebih dahulu baca documentasi yang disediakan laravel yaitu ada https://jetstream.laravel.com/installation.html untuk download pacakge
- jalankan perintah berikut composer require laravel/jetstream
- jika mendapatkan error saat install package jetstreamnya jalankan perintah ini composer remove laravel/jetstream
- kemudian jalankan perintah php artisan optimize untuk menghapus config atau cache yang di routing ataupun view dsb
- kemudian lakukan instalasi ulang dengan perintah berikut composer require laravel/jetstream
- jika instalasi berhasil jalankan perintah berikut php artisan jetstream:install livewire
- jika sudah selesai lakukan perintah npm install && npm run dev
- setelah sudah selesai jalankan php artisan migrate
- selanjutnya jalankan perintah php artisan vendor:publish --tag=jetstream-views untuk publish jetstreamnya
- selanjutnya jalankan kembali aplikasi nya dengan perintah php artisan serve
- kemudian periksa halaman loginnya
- perbaiki file guest.blade.php di folder view 
	<!-- Scripts -->
    <link rel="stylesheet" href="{{ asset('css/app.css') }}">

    <!-- Scripts -->
    <script src="{{ asset('js/app.js') }}" defer></script>
- kemudian perbaiki file authentication-card-logo.blade.php dengan code ini <a href="{{ url('/') }}">
- selanjutnya lakukan untuk mengganti halaman login dengan menggunakan template login adminLTE
- sebelumnya mengganti halaman login lakukan pengecekan database user lakukan perintah dengan cepat php artisan tinker berikut langkahnya:
	php artisan tinker
	Psy Shell v0.11.21 (PHP 8.2.9 — cli) by Justin Hileman
	> $user = new \App\Models\User();
	= App\Models\User {#6325 +profile_photo_url: "https://ui-avatars.com/api/?name=&color=7F9CF5&background=EBF4FF",}	
	> $user
	= App\Models\User {#6325
    +profile_photo_url: "https://ui-avatars.com/api/?name=&color=7F9CF5&background=EBF4FF",
  }

	> $user->get();
	= Illuminate\Database\Eloquent\Collection {#6669
    all: [
      App\Models\User {#7031
        id: 1,
        name: "User",
        email: "users@gmail.com",
        email_verified_at: null,
        #password: "$2y$10$zp4YXBQiwL4Un6hJbjXPjO/kNg/9oN83vzBJy1XlImZW8X0VFbJ5.",
        #two_factor_secret: null,
        #two_factor_recovery_codes: null,
        two_factor_confirmed_at: null,
        photo: null,
        level: 0,
        #remember_token: null,
        created_at: "2023-09-24 17:54:11",
        updated_at: "2023-09-24 17:54:11",
- jika db user tidak ada maka buat db user dengan perintah php artisan tinker
	> $user->name = 'Administrator'
	= "Administrator"

	> $user->email = 'eagle@gmail.com';
	= "eagle@gmail.com"

	> $user->password = bcrypt('password');
	= "$2y$10$GuGFzhAxuHuTfn1bSPeiN..g4bzWPuo3wqtRFr5Q.oMmi/4mYoXtW"

	> $user->level = 1;
	= 1

	> $user->save();
	= true

	outputnya:
	App\Models\User {#7292
        id: 2,
        name: "Administrator",
        email: "eagle@gmail.com",
        email_verified_at: null,
        #password: "$2y$10$GuGFzhAxuHuTfn1bSPeiN..g4bzWPuo3wqtRFr5Q.oMmi/4mYoXtW",
        #two_factor_secret: null,
        #two_factor_recovery_codes: null,
        two_factor_confirmed_at: null,
        photo: null,
        level: 1,
        #remember_token: null,
        created_at: "2023-09-24 18:04:48",
        updated_at: "2023-09-24 18:04:48",
        +profile_photo_url: "https://ui-avatars.com/api/?name=A&color=7F9CF5&background=EBF4FF",
      },
    ],
  }

- untuk user level nya 0 dan admin levelnya 1
- pada route/web.php ganti route ini Route::get('/', function () {
    return view('welcome');
}); menjadi Route::get('/', fn () => redirect()->route('login')); hal ini dilakukan agar saat run aplikasi nya akan berada di halaman login terlebih dahulu

- tambahkan satu file kedalam folder layouts dengan nama auth.blade.php kemudian copy file login.html ke dalam auth.blade.php
- kemudian pada file login.blade.php edit tambahkan ini @extends('layouts.auth')
	@section('login')
		<div class="login-box">
			<div class="login-logo">
				<a href="../../index2.html"><b>Admin</b>LTE</a>
			</div>
			<!-- /.login-logo -->
			<div class="login-box-body">
				<p class="login-box-msg">Sign in to start your session</p>

				<form action="../../index2.html" method="post">
					<div class="form-group has-feedback">
						<input type="email" class="form-control" placeholder="Email">
						<span class="glyphicon glyphicon-envelope form-control-feedback"></span>
					</div>
					<div class="form-group has-feedback">
						<input type="password" class="form-control" placeholder="Password">
						<span class="glyphicon glyphicon-lock form-control-feedback"></span>
					</div>
					<div class="row">
						<div class="col-xs-8">
							<div class="checkbox icheck">
								<label>
									<input type="checkbox"> Remember Me
								</label>
							</div>
						</div>
						<!-- /.col -->
						<div class="col-xs-4">
							<button type="submit" class="btn btn-primary btn-block btn-flat">Sign In</button>
						</div>
						<!-- /.col -->
					</div>
				</form>

				<div class="social-auth-links text-center">
					<p>- OR -</p>
					<a href="#" class="btn btn-block btn-social btn-facebook btn-flat"><i class="fa fa-facebook"></i>
						Sign in using
						Facebook</a>
					<a href="#" class="btn btn-block btn-social btn-google btn-flat"><i class="fa fa-google-plus"></i>
						Sign in using
						Google+</a>
				</div>
				<!-- /.social-auth-links -->

				<a href="#">I forgot my password</a><br>
				<a href="register.html" class="text-center">Register a new membership</a>

			</div>
			<!-- /.login-box-body -->
		</div>
	@endsection

- edit halaman login dengan menghapus beberapa feature yang tidak dibutuhkan

# memperbaiki tampilan dan layout aplikasi
- hapus beberapa fitur yang tidak dibutuhkan pada header aplikasi
- pada file header.blade.php dibagian sign out edit script nya seperti ini 
	<div class="pull-right">
    <a href="#" class="btn btn-default btn-flat" onclick="$('#logout-form').submit()">Sign out</a></div>
- setelah penutup </header> tambahkan script ini 
		<form action="{{ route('logout') }}" method="post" id="logout-form" style="display: none;"">
    	@csrf
	</form>

# CRUD Kategory
-  buatlah crud kategory dengan perintah php artisan make:model NamaFileModel
- setelah itu cek file category yang telah dibuat di dalam folder app/Models/
- buka file models tambahkan ini 
	class Category extends Model
	{
    	use HasFactory;
    	protected $table = 'category';
    	protected $guarded = [];
	}
- setelah file model telah dibuat, kemudian buatlah file controllernya dengan perintah php artisan make:controller NamaFileController -r
- kemudian setelah model dan controller sudah dibuat maka defenisikan route pada tiap controllernya agar dapat diakses oleh route
- selanjutnya buka file web.php yang ada pada folder route, sebelumnya lakukan grouping middleware untuk login berikut:
	Route::group(['middleware' => 'auth'], function () {
    Route::get('/category/data', [CategoryController::class, 'data']); # untuk get data category pada tabel category
	Route::resource('/category', CategoryController::class); # untuk route pada akses resource
	});
- kemudian jalankan kembali proyek nya
- setelah route nya sudah benar maka tambahkan sebuah folder dalam folder views dengan nama folder category yang dimana file tersebut akan menyimpan file blade untuk tampilan pada menu category
- didalam folder category tambahkan 2 file dengan nama form.blade.php dan index.blade.php
- buatlah tampilan data table pada catery list pada file indexnya
- kemudian buat table nya dengan menambahkan data table bawaan dari adminlte script dan link copy dan paste ke dalam file master
- dan panggil ke dalam index category
- lakukan inisialisasi datatable
- setelah buka bootstrap.com di browser/google cari versi 3 dan kemudian klik menu javascript dan cari example untuk modal
- setelah example modal di klik lalu copy code untuk modal dan paste kedalam file form.blade.php
- setelah itu lakukan include ke dalam index.blade untuk kategory.form nya
- lakukan aksi pada button save pada modal form untuk menyimpan data ke database
- lakukan validasi data ketika disubmit dengan cara :
	- bootstrap validator
		https://100hz.github.io/bootstrap-validator
	atau
	- link CDN
	https://cdnjs.cloudflare.com/ajax/libs/1000hz-bootstrap-validator/0.11.9/validator.min.js

- selanjutnya install laravel datatable di https://github.com/yajra/laravel-datatables dengan perintah composer require yajra/laravel-datatables-oracle:"~9.0"
- kemudian pastekan regsiter ini Yajra\DataTables\DataTablesServiceProvider::class, ke provider di file config/app.php
- dan alieases pastekan ini 'DataTables' => Yajra\DataTables\Facades\DataTables::class,
- kemudian publish datatables dengan perintah php artisan vendor:publish --provider="Yajra\DataTables\DataTablesServiceProvider"
- terakhir jalankan php artisan config:clear
- documentasi datatable https://yajrabox.com/docs/laravel-datatables/master/engine-eloquent